import * as Notifications from 'expo-notifications';
import { Platform, Alert } from 'react-native';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export async function registerForPushNotificationsAsync() {
  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  const { status: existingStatus } = await Notifications.getPermissionsAsync();
  let finalStatus = existingStatus;
  if (existingStatus !== 'granted') {
    const { status } = await Notifications.requestPermissionsAsync();
    finalStatus = status;
  }
  if (finalStatus !== 'granted') {
    alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!');
    return;
  }
}

export async function scheduleTaskNotification(task) {
  const trigger = new Date(task.reminderTime);
  
  if (trigger.getTime() <= Date.now()) {
    console.log('–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –º–∏–Ω—É–≤. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ.');
    return null;
  }

  try {
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title: "üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: " + task.title,
        body: task.description || '–ß–∞—Å –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è!',
        data: { taskId: task.id, title: task.title },
      },
      trigger,
    });
    return notificationId;
  } catch (error) {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
    return null;
  }
}

export async function cancelTaskNotification(notificationId) {
  if (!notificationId) {
    return;
  }
  try {
    await Notifications.cancelScheduledNotificationAsync(notificationId);
    console.log('–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ:', notificationId);
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", e);
  }
}

export function setupNotificationListeners() {
  const subscription = Notifications.addNotificationResponseReceivedListener(response => {
    const taskData = response.notification.request.content.data;
    if (taskData?.taskId) {
      Alert.alert(
        `–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ?`,
        `–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è: "${taskData.title}"`,
        [{ text: "OK" }]
      );
    }
  });

  return () => {
    Notifications.removeNotificationSubscription(subscription);
  };
}